#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <algorithm>
#include <ctime>
using namespace std;

struct Card
{
	string cardType;	//牌的花色【黑桃 红桃 梅花 方片 王牌】
	string cardNumber;	//牌的编号【A 2 3 4 5 6 7 8 9 10 J Q K】【当牌为王牌时，cardNumber=""】
	int cardKey;		//牌的Key值=花色Key+牌的编号【黑桃=0|红桃=20|梅花=30|方片=40|王牌=100|A=1|J=11|Q=12|K=13】
};

class DataHandler
{
public:
	DataHandler();
	~DataHandler();

	//**************************************** 提供一些转换的接口 ****************************************
	//解释：Key表示一张牌的值，Card表示描述一张牌的结构体，String表示在一张牌控制台上打印出来的样子【黑桃A】
	static string getCardType(int cardType);
	static string getCardNumber(int cardNumber);
	static int getCardType(string cardType);
	static int getCardNumber(string cardNumber);
	static string IntToString(int number);

	Card keyToCard(int key);
	string keyToString(int key);
	int cardToKey(Card card);
	string cardToString(Card card);
	int stringToKey(string str);
	Card stringToCard(string str);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		展示初始生成的牌组，包含108张牌
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void displayOriginalList();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		玩家牌组的展示
	//		para：玩家的牌组
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void displayPlayerCardList(const vector<Card> list);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		排序规则，按照牌面的数字进行排序
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static bool compareNumber(Card a, Card b);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		排序规则，按照牌的Key值进行排序
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	static bool compareKey(Card a, Card b);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		对固定的数组按照compareNumber的规则排序
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void sortPlayerCardList(vector<Card>& list);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		对固定的数组按照compareKey的规则排序
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void sortCardKey(vector<Card>& list);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		对初始牌组进行乱序
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void outOrderOriginalList();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		发牌函数，把乱序之后的originalList中的104张牌平分给4个玩家
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void dealCard();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		字符串分割函数，所用函数原型：istream& getline ( istream& is, string& str, char delim );
	//		para1：需要分割的字符串，para2：一个字符作为分割标准，para3：out参数，一个vector引用存储分割结果
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void splitString(string srcString, char splitFlag, vector<string>& stringVector);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		玩家出牌的函数
	//		para1：玩家编号，para2：出牌序列【0,2,3表示出当前牌组的第0,2,3张牌】
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void handlePlayer(int playerNumber, string cardList);
	void removeCard(vector<Card>& list, vector<int> cardList);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		当局游戏结束，判断规则【有一组玩家全部出完】
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool gameOver();

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		根据出完牌的玩家的先后次序计算下一轮打的牌
	//		para1：第一名，para2：第二名，para3：第三名，para4：第四名
	//		如果first=1，表示第一名是player_1
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void handleWinner(int first, int second, int third, int fourth);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		根据当前的牌+升级的数量计算出现在应该打哪一张
	//		para1：当前某一组的主牌，para2：升级数
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	string calculateLevel(string mainCard, int level);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		判断两个玩家是不是一组的
	//		para1：玩家编号，para2：玩家编号
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool isPartner(int playerA, int playerB);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		根据编号获取对应玩家的牌组
	//		para1：玩家编号
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	vector<Card> getPlayerCardList(int number);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		把一张牌插入编号为playerNumber的玩家数组中
	//		para1：玩家编号，para2：牌
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void insertCardList(int playerNumber, Card card);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		查询是否存在某一张牌，返回存在的张数
	//		para1：玩家编号，para2：牌的Key值
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	int cardExist(int playerNumber, int cardKey);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		查询进贡的牌是否合法
	//		para1：玩家编号，para2：牌的结构体类型
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool tributeValid(int playerNumber, Card card);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		查询还贡的牌是否合法
	//		para1：牌的结构体类型
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	bool returnValid(Card card);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		查询还贡的牌是否合法
	//		para1：牌的结构体类型
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	string getOrderTail(string cardNumber);

	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	//		查询一个牌组是否存在同花顺，如果存在，将同花顺序列【0,1,2,3,4】放入vector返回
	//		para1：牌组
	////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void calculateStraightFlush(vector<Card> cardList);

public:
	vector<int> originalList;	//模拟两副牌最开始没有被打乱的状态
	vector<Card> player_1;		//模拟玩家1的抓到的牌组
	vector<Card> player_2;		//模拟玩家2的抓到的牌组
	vector<Card> player_3;		//模拟玩家3的抓到的牌组
	vector<Card> player_4;		//模拟玩家4的抓到的牌组

	string mainFirst;			//保存第一组玩家当前打到哪一张牌【即下一局打什么牌】
	string mainSecond;			//保存第二组玩家当前打到哪一张牌
	string currentWin;			//保存当局的赢家【A->player_1+player_3|B->player_2+player_4】
	string lastWin;				//保存上局的赢家
	string currentMainCard;		//当前的主牌的编号
	int firstPlayTime;			//记录第一组玩家打A的次数
	int secondPlayTime;			//记录第二组玩家打A的次数
};